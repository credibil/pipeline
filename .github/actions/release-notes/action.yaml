name: Prepare release notes
description: Prepare release notes for an upcoming release

inputs:
  version:
    description: The release notes version.
    required: true
  release-type:
    description: One of 'major', 'minor', 'patch', or 'next'.
    default: major

runs:
  using: composite
  steps:
    - name: Generate release notes
      if: ${{ inputs.release-type != 'next' }}
      id: notes
      uses: actions/github-script@v8
      with:
        result-encoding: string
        script: |
          const response = await github.rest.repos.generateReleaseNotes({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: "v${{ inputs.version }}",
          })
          return response.data.body;

    # -------------------------------------------
    # Major/minor
    # -------------------------------------------
    - name: Create RELEASES.md
      if: ${{ inputs.release-type == 'major' }} || ${{ inputs.release-type == 'minor' }}
      shell: bash
      run: |
        body=$(sed -n '/---/,$!p' RELEASES.md)
        archive=$(sed -n '/---/,$p' RELEASES.md)

        cat > RELEASES.md <<EOF
        $body

        ${{ steps.notes.outputs.result }}

        $archive
        EOF

    # -------------------------------------------
    # Patch
    # -------------------------------------------
    - name: Patch RELEASES.md
      if: ${{ inputs.release-type == 'patch' }}
      shell: bash
      run: |
        previous=$(cat RELEASES.md)

        cat > RELEASES.md <<EOF
        ## ${{ inputs.version }}

        Unreleased

        ## Fixed

        ${{ steps.notes.outputs.result }}

        ---

        $previous
        EOF

    # -------------------------------------------
    # Next
    # -------------------------------------------
    - name: Next RELEASES.md
      if: ${{ inputs.release-type == 'next' }}
      shell: bash
      run: |
        set -ex
        title=$(sed -n '1p' RELEASES.md)
        version=$(echo $title | sed 's/## //')
        version_x=$(echo $version | sed 's/.$/x/')

        sed -i "/ARCHIVE_START/a * [$version_x](https://github.com/${{ github.repository }}/blob/release-$version/RELEASES.md)" RELEASES.md

    - name: Create next release notes
      if: ${{ inputs.release-type == 'next' }}
      shell: bash
      run: |
        set -ex
        archive=$(sed -n '/---/,$p' RELEASES.md)

        cat > RELEASES.md <<EOF
        ## ${{ inputs.version }}

        Unreleased

        ### Added

        ### Changed

        $archive
        EOF

    - name: Update branch with changes
      shell: bash
      run: |
        git commit -am "Update release notes for ${{ inputs.version }}"
        git push origin
