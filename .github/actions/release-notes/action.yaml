name: Prepare release notes
description: Prepare release notes for an upcoming release

inputs:
  version:
    description: The version to use to create release notes.
    required: true
  type:
    description: Whether the release notes are for the 'current' or 'next' release.
    default: current
  # branch:
  #   description: The branch to push the updated release notes to.
  #   required: true

# git reset --hard origin/${{ steps.latest.outputs.branch }}
runs:
  using: composite
  steps:
    # -------------------------------------------
    # Generate release notes for the current version
    # -------------------------------------------
    - name: Generate release notes
      if: ${{ inputs.type == 'current' }}
      id: notes
      uses: actions/github-script@v8
      with:
        result-encoding: string
        script: |
          const response = await github.rest.repos.generateReleaseNotes({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: "v0.5.0",
            previous_tag_name: "v0.1.0"
          })
          return response.data.body;

    - name: Update RELEASES.md
      if: ${{ inputs.type == 'current' }}
      shell: bash
      run: |
        # sed -i "/### Changed/a  \n${{ steps.notes.outputs.result }}\n" RELEASES.md
        
        sed -i <<-EOF
          /### Changed/a 

          ${{ steps.notes.outputs.result }}
        EOF
        RELEASES.md

    # -------------------------------------------
    # Create release notes for the next version
    # -------------------------------------------
    - name: Archive previous release
      if: ${{ inputs.type == 'next' }}
      shell: bash
      run: |
        set -ex

        title=$(sed -n '1p' RELEASES.md)
        version=$(echo $title | sed 's/## //')
        version_x=$(echo $version | sed 's/.$/x/')
        sed -i "/ARCHIVE_START/a * [$version_x](https://github.com/${{ github.repository }}/blob/release-$version/RELEASES.md)" RELEASES.md

    - name: Create next release notes
      if: ${{ inputs.type == 'next' }}
      shell: bash
      run: |
        set -ex
        sed -i '0,/---/d' RELEASES.md
        archive=$(cat RELEASES.md)

        cat > RELEASES.md <<-EOF
          ## ${{ inputs.version }}

          Unreleased

          ### Added

          ### Changed

          ---
          $archive
        EOF

        git commit -am "Update release notes for ${{ inputs.version }}"
        # git push origin HEAD:${{ inputs.branch }}
