name: Prepare release notes
description: Prepare release notes for an upcoming release

inputs:
  version:
    description: The version to use to create release notes.
    required: true
  type:
    description: Whether the release notes are for the 'current' or 'next' release.
    default: current
  # branch:
  #   description: The branch to push the updated release notes to.
  #   required: true

# git reset --hard origin/${{ steps.latest.outputs.branch }}
runs:
  using: composite
  steps:
    # -------------------------------------------
    # Generate release notes for the current version
    # -------------------------------------------
    - name: Generate release notes
      if: ${{ inputs.type == 'current' }}
      id: notes
      uses: actions/github-script@v8
      with:
        result-encoding: string
        script: |
          const response = await github.rest.repos.generateReleaseNotes({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: ${{ inputs.version }},
          })
          return response.data.body;

    - name: Update RELEASES.md
      if: ${{ inputs.type == 'current' }}
      shell: bash
      run: |
        body=$(sed -n '/---/,$!p' RELEASES.md)
        archive=$(sed -n '/---/,$p' RELEASES.md)
        
        cat > RELEASES.md <<EOF
        $body

        ${{ steps.notes.outputs.result }}

        $archive
        EOF

        git commit -am "Update release notes for ${{ inputs.version }}"
        git push origin

    # -------------------------------------------
    # Create release notes for the next version
    # -------------------------------------------
    - name: Archive previous release notes
      if: ${{ inputs.type == 'next' }}
      shell: bash
      run: |
        set -ex
        title=$(sed -n '1p' RELEASES.md)
        version=$(echo $title | sed 's/## //')
        version_x=$(echo $version | sed 's/.$/x/')

        sed -i "/ARCHIVE_START/a * [$version_x](https://github.com/${{ github.repository }}/blob/release-$version/RELEASES.md)" RELEASES.md

    - name: Create next release notes
      if: ${{ inputs.type == 'next' }}
      shell: bash
      run: |
        set -ex
        archive=$(sed -n '/---/,$p' RELEASES.md)

        cat > RELEASES.md <<EOF
        ## ${{ inputs.version }}

        Unreleased

        ### Added

        ### Changed

        ---
        $archive
        EOF

        git commit -am "Update release notes for ${{ inputs.version }}"
        git push origin
